// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
}

model Membership {
  id                 Int              @id @default(autoincrement())
  role               MembershipRole[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organization       Organization     @relation(fields: [organizationId], references: [id])
  organizationId     Int
  user               User?            @relation(name: "Memberships", fields: [userId], references: [id])
  userId             Int?
  invitation         Invitation?
  lastMembershipUser User[]           @relation("LastMembership")

  @@unique([organizationId, userId])
}

enum MembershipRole {
  ADMIN
  MANAGER
  USER
}

model Invitation {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String?
  email        String
  inviter      User       @relation(fields: [inviterId], references: [id])
  inviterId    Int
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId Int        @unique
}

model User {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String?
  email            String        @unique
  emailVerified    Boolean       @default(false)
  role             GlobalRole
  memberships      Membership[]  @relation(name: "Memberships")
  lastMembershipId Int?
  lastMembership   Membership?   @relation(name: "LastMembership", fields: [lastMembershipId], references: [id])
  invitations      Invitation[]
  userPassword     UserPassword?
}

// User and UserPassword are 2 separate models :
// - prisma do not support (yet) @private or @exclude annotation to auto-exclude hashedPassword
// - so dbal/backend code have to explicitly remove hashedPassword from user which is a big mess and error prone
// - splitting User model in 2 allows for easier to write code in dbal/backend and improve security (no accidental hashedPassword leak)
model UserPassword {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [id])
  userId         Int    @unique
  hashedPassword String
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}
